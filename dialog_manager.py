# -*- coding: utf-8 -*-
"""–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞"""

import json
import os
import logging
from typing import Dict, List, Optional
from datetime import datetime
from dataclasses import dataclass, asdict

@dataclass
class DialogMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ"""
    role: str  # 'user' –∏–ª–∏ 'assistant'
    content: str
    timestamp: str
    tokens_used: int = 0

@dataclass
class Dialog:
    """–î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    dialog_id: str
    created_at: str
    topic: str = "–ù–æ–≤–∞—è —Ç–µ–º–∞"
    messages: List[DialogMessage] = None
    summary: str = ""
    is_active: bool = True
    
    def __post_init__(self):
        if self.messages is None:
            self.messages = []

class DialogManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, storage_path: str = "dialogs", max_messages: int = 10, max_dialogs: int = 50):
        self.storage_path = storage_path
        self.max_messages = max_messages
        self.max_dialogs = max_dialogs
        self.active_dialogs: Dict[int, Dialog] = {}
        os.makedirs(storage_path, exist_ok=True)
    
    def _get_dialog_filename(self, user_id: int, dialog_id: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞"""
        return os.path.join(self.storage_path, f"{user_id}_{dialog_id}.json")
    
    def _generate_dialog_id(self) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ID –¥–∏–∞–ª–æ–≥–∞"""
        return datetime.now().strftime("%Y%m%d_%H%M%S")
    
    def start_new_dialog(self, user_id: int, topic: str = "–ù–æ–≤–∞—è —Ç–µ–º–∞") -> Dialog:
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"""
        dialog_id = self._generate_dialog_id()
        dialog = Dialog(
            user_id=user_id,
            dialog_id=dialog_id,
            created_at=datetime.now().isoformat(),
            topic=topic
        )
        
        self.active_dialogs[user_id] = dialog
        self._save_dialog(dialog)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
        self._cleanup_old_dialogs(user_id)
        
        logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {dialog_id}")
        return dialog
    
    def get_active_dialog(self, user_id: int) -> Optional[Dialog]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.active_dialogs.get(user_id)
    
    def add_message(self, user_id: int, role: str, content: str, tokens_used: int = 0) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥"""
        dialog = self.get_active_dialog(user_id)
        if not dialog:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–µ—Ç
            dialog = self.start_new_dialog(user_id)
        
        message = DialogMessage(
            role=role,
            content=content,
            timestamp=datetime.now().isoformat(),
            tokens_used=tokens_used
        )
        
        dialog.messages.append(message)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        if len(dialog.messages) > self.max_messages:
            dialog.messages = dialog.messages[-self.max_messages:]
        
        self._save_dialog(dialog)
        return True
    
    def update_summary(self, user_id: int, summary: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å summary –¥–∏–∞–ª–æ–≥–∞"""
        dialog = self.get_active_dialog(user_id)
        if not dialog:
            return False
        
        dialog.summary = summary
        self._save_dialog(dialog)
        return True
    
    def _save_dialog(self, dialog: Dialog):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤ —Ñ–∞–π–ª"""
        filename = self._get_dialog_filename(dialog.user_id, dialog.dialog_id)
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º dataclass –≤ dict –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                dialog_dict = asdict(dialog)
                json.dump(dialog_dict, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ {filename}: {e}")
    
    def _cleanup_old_dialogs(self, user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            dialogs = self.get_user_dialogs(user_id)
            if len(dialogs) > self.max_dialogs:
                # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏
                dialogs_to_delete = dialogs[self.max_dialogs:]
                for dialog in dialogs_to_delete:
                    filename = self._get_dialog_filename(user_id, dialog.dialog_id)
                    if os.path.exists(filename):
                        os.remove(filename)
                        logging.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –¥–∏–∞–ª–æ–≥: {filename}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    def load_dialog(self, user_id: int, dialog_id: str) -> Optional[Dialog]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏–∑ —Ñ–∞–π–ª–∞"""
        filename = self._get_dialog_filename(user_id, dialog_id)
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                data = json.load(f)
                dialog = Dialog(
                    user_id=data['user_id'],
                    dialog_id=data['dialog_id'],
                    created_at=data['created_at'],
                    topic=data.get('topic', '–ù–æ–≤–∞—è —Ç–µ–º–∞'),
                    summary=data.get('summary', ''),
                    is_active=data.get('is_active', False)
                )
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                for msg_data in data.get('messages', []):
                    message = DialogMessage(
                        role=msg_data['role'],
                        content=msg_data['content'],
                        timestamp=msg_data['timestamp'],
                        tokens_used=msg_data.get('tokens_used', 0)
                    )
                    dialog.messages.append(message)
                
                return dialog
        except FileNotFoundError:
            return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–∞ {filename}: {e}")
            return None
    
    def get_user_dialogs(self, user_id: int) -> List[Dialog]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        dialogs = []
        try:
            for filename in os.listdir(self.storage_path):
                if filename.startswith(f"{user_id}_"):
                    dialog_id = filename.replace(f"{user_id}_", "").replace(".json", "")
                    dialog = self.load_dialog(user_id, dialog_id)
                    if dialog:
                        dialogs.append(dialog)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            dialogs.sort(key=lambda x: x.created_at, reverse=True)
            return dialogs
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []
    
    def export_dialog_text(self, dialog: Dialog) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        lines = []
        lines.append(f"–î–∏–∞–ª–æ–≥: {dialog.topic}")
        lines.append(f"–°–æ–∑–¥–∞–Ω: {datetime.fromisoformat(dialog.created_at).strftime('%d.%m.%Y %H:%M')}")
        lines.append(f"ID: {dialog.dialog_id}")
        lines.append(f"–°–æ–æ–±—â–µ–Ω–∏–π: {len(dialog.messages)}")
        if dialog.summary:
            lines.append(f"Summary: {dialog.summary}")
        lines.append("=" * 50)
        
        for i, message in enumerate(dialog.messages, 1):
            role = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if message.role == 'user' else "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
            timestamp = datetime.fromisoformat(message.timestamp).strftime('%H:%M')
            lines.append(f"\n{i}. {role} [{timestamp}]:")
            lines.append(message.content)
            if message.tokens_used > 0:
                lines.append(f"[–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {message.tokens_used}]")
        
        lines.append("\n" + "=" * 50)
        lines.append(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(dialog.messages)}")
        lines.append(f"–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ: {self.max_messages}")
        
        return "\n".join(lines)
    
    def export_dialog_json(self, dialog: Dialog) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç"""
        try:
            return json.dumps(asdict(dialog), ensure_ascii=False, indent=2)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –≤ JSON: {e}")
            return ""